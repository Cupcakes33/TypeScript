{
  /**
   * 절차 지향 프로그래밍
   * 명령과 절차를 따라가는 프로그래밍
   * 단점 : 프로젝트에 신규 투입되었다면 함수가 얽혀있어 하나를 수정하기 위해 전체적인 구조를 알아야 한다.
   * 하나의 프로그램을 수정했을 때 사이드 이펙트의 발생 가능성을 고려해야 한다.
   * 유지보수, 확장이 어렵다.
   */

  /**
   * 객체 지향 프로그래밍
   * 프로그램을 객체로 정의해서 객체 끼리 의사소통 할 수 있도록.
   * 관련있는 데이터나 함수를 오브젝트로 정의한다.
   * 한 곳에서 문제가 생긴다면 문제가 생긴 곳에서만 보수할 수 있다.
   * 모듈화가 쉽고 재사용하기 쉽다.
   * 필드와 메소드로 구성되어 있다. = 클래스(템플릿)
   * 오브젝트는 클래스의 인스턴스다.
   * 클래스 = 붕어빨 틀 / 오브젝트 = 붕어빵
   */

  /**
   * 객체 지향 프로그래밍의 원칙
   * 1. Encapsulation : 캡슐화
   * 관련된 코드를 하나로 묶어서 관리.
   * ex) 감기약 = 수많은 가루들의 집합체 - 외부에서 볼 필요가 없는 데이터를 오브젝트 단위로 묶어 하나의 객체로 관리.
   * 고양이라는 객체는 배고픔, 추움, 행복함 등의 상태의 집합체
   * 상태를 변경하는 방법은 외부 함수(놀아주고, 먹이를 주는 것)로 가능하다.
   * 2. Abstraction : 추상화
   * 내부의 복잡한 기능을 외부에서 간단한 인터페이스를 통해서 사용할 수 있다.
   * 커피머신이 어떻게 동작하는지 내부 구조를 다 알지 못해도
   * 버튼하나만 누르면 커피를 만들 수 있다.
   * 외부에서 내부가 얼마나 복잡한지 알 필요가 전혀 없고,
   * 인터페이스를 통해서 상호작용하면 된다.
   * 3. Inheritance : 상속
   * 커피머신이라는 클래스를 상속하여 추가 기능을 붙혀 나에게 좀 더 필요한 클래스를 만들 수 있다.
   * 
   * 4. Polymorphism : 다양성
   * 다양한 형태로 변칙정으로 변화할 수 있다.
   */ 

}